/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Typeform } from "@fern-api/typeform";
import urlJoin from "url-join";
import * as errors from "../../../../errors";
import * as serializers from "../../../../serialization";

export declare namespace Client {
    interface Options {
        environment?: environments.TypeformEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Retrieves a list of JSON descriptions for all themes in your Typeform account (public and private). Themes are listed in reverse-chronological order based on the date you added them to your account.
     */
    public async list(request: Typeform.ListThemesRequest = {}): Promise<void> {
        const { page, pageSize } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (pageSize != null) {
            _queryParams.append("page_size", pageSize.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.TypeformEnvironment.Production, "/themes"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a new theme.
     */
    public async create(request: Typeform.CreateThemeRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.TypeformEnvironment.Production, "/themes"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.CreateThemeRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a theme in your Typeform account.
     */
    public async get(themeId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.TypeformEnvironment.Production, `/themes/${themeId}`),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates a theme in your Typeform account. **NOTE:** You can't change Typeform's public themes (the built-in themes that are available in all accounts).
     */
    public async udpate(themeId: string, request: Typeform.UpdateThemeRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.TypeformEnvironment.Production, `/themes/${themeId}`),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.UpdateThemeRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a theme from your Typeform account.
     */
    public async delete(themeId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.TypeformEnvironment.Production, `/themes/${themeId}`),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
