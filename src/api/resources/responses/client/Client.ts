/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Typeform } from "@fern-api/typeform";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment: environments.TypeformEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Returns form responses and date and time of form landing and submission.
     */
    public async getFormById(formId: string, request: Typeform.GetFormByIdRequest = {}): Promise<void> {
        const { pageSize, since, until, after, before, includedResponseIds, completed, sort, query } = request;
        const _queryParams = new URLSearchParams();
        if (pageSize != null) {
            _queryParams.append("page_size", pageSize.toString());
        }

        if (since != null) {
            _queryParams.append("since", since);
        }

        if (until != null) {
            _queryParams.append("until", until);
        }

        if (after != null) {
            _queryParams.append("after", after);
        }

        if (before != null) {
            _queryParams.append("before", before);
        }

        if (includedResponseIds != null) {
            _queryParams.append("included_response_ids", includedResponseIds);
        }

        if (completed != null) {
            _queryParams.append("completed", completed.toString());
        }

        if (sort != null) {
            _queryParams.append("sort", sort);
        }

        if (query != null) {
            _queryParams.append("query", query);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/forms/${formId}/responses/`),
            method: "GET",
            headers: {
                api_key: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete responses to a form. You must specify the `included_tokens` parameter.
     */
    public async deleteResponses(formId: string, request: Typeform.DeleteResponsesRequest): Promise<void> {
        const { includedTokens } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("included_tokens", includedTokens);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/forms/${formId}/responses/`),
            method: "DELETE",
            headers: {
                api_key: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves a file uploaded as an answer for a submission
     */
    public async retrieveResponseFile(
        formId: string,
        responseId: string,
        fieldId: string,
        filename: string
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                `/forms/${formId}/responses//${responseId}/fields/${fieldId}/files/${filename}`
            ),
            method: "GET",
            headers: {
                api_key: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TypeformError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TypeformError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TypeformTimeoutError();
            case "unknown":
                throw new errors.TypeformError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
